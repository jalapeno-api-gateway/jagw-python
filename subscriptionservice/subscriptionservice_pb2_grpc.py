# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from subscriptionservice import subscriptionservice_pb2 as subscriptionservice_dot_subscriptionservice__pb2


class SubscriptionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToLsNodes = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToLsNodes',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.LsNodeEvent.FromString,
                )
        self.SubscribeToLsLinks = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToLsLinks',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.LsLinkEvent.FromString,
                )
        self.SubscribeToLsPrefixes = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToLsPrefixes',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.LsPrefixEvent.FromString,
                )
        self.SubscribeToLsSrv6Sids = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToLsSrv6Sids',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.LsSrv6SidEvent.FromString,
                )
        self.SubscribeToLsNodeEdges = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToLsNodeEdges',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.LsNodeEdgeEvent.FromString,
                )
        self.SubscribeToPeers = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToPeers',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.PeerEvent.FromString,
                )
        self.SubscribeToTelemetryData = channel.unary_stream(
                '/jagw.SubscriptionService/SubscribeToTelemetryData',
                request_serializer=subscriptionservice_dot_subscriptionservice__pb2.TelemetrySubscription.SerializeToString,
                response_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TelemetryEvent.FromString,
                )


class SubscriptionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeToLsNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToLsLinks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToLsPrefixes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToLsSrv6Sids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToLsNodeEdges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToPeers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToTelemetryData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToLsNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToLsNodes,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.LsNodeEvent.SerializeToString,
            ),
            'SubscribeToLsLinks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToLsLinks,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.LsLinkEvent.SerializeToString,
            ),
            'SubscribeToLsPrefixes': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToLsPrefixes,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.LsPrefixEvent.SerializeToString,
            ),
            'SubscribeToLsSrv6Sids': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToLsSrv6Sids,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.LsSrv6SidEvent.SerializeToString,
            ),
            'SubscribeToLsNodeEdges': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToLsNodeEdges,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.LsNodeEdgeEvent.SerializeToString,
            ),
            'SubscribeToPeers': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToPeers,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.PeerEvent.SerializeToString,
            ),
            'SubscribeToTelemetryData': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToTelemetryData,
                    request_deserializer=subscriptionservice_dot_subscriptionservice__pb2.TelemetrySubscription.FromString,
                    response_serializer=subscriptionservice_dot_subscriptionservice__pb2.TelemetryEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jagw.SubscriptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubscriptionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeToLsNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToLsNodes',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.LsNodeEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToLsLinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToLsLinks',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.LsLinkEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToLsPrefixes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToLsPrefixes',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.LsPrefixEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToLsSrv6Sids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToLsSrv6Sids',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.LsSrv6SidEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToLsNodeEdges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToLsNodeEdges',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.LsNodeEdgeEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToPeers',
            subscriptionservice_dot_subscriptionservice__pb2.TopologySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.PeerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToTelemetryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jagw.SubscriptionService/SubscribeToTelemetryData',
            subscriptionservice_dot_subscriptionservice__pb2.TelemetrySubscription.SerializeToString,
            subscriptionservice_dot_subscriptionservice__pb2.TelemetryEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
